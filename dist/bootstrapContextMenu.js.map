{"version":3,"sources":["bootstrapContextMenu.js"],"names":["angular","module","controller","$scope","$document","$element","$window","_this","this","isVisible","activeMenus","nestedAtLeft","KEYCODE_LEFT","KEYCODE_RIGHT","KEYCODE_UP","KEYCODE_DOWN","KEYCODE_CONFIRM","selectedMenuIndex","selectedButtonIndex","getMenuAtDepth","depth","result","forEach","menu","isButtonItemEnabled","item","enabled","$eval","setMenuPosition","menuElement","x","y","css","position","left","top","z-index","handleItemClick","_typeof","click","hide","handleItemMouseOver","button","fromKeyboard","arguments","length","undefined","selectedMenu","selectedButton","buttons","element","removeClass","menusToRemove","m","push","removeMenu","submenu","offset","menuWidth","width","nestedMenu","addMenu","nestedMenuWidth","items","parentButtonElement","div","addClass","attr","role","append","text","href","span","isEnabled","on","event","find","menuHeight","height","Math","min","pageYOffset","index","indexOf","splice","remove","show","target","hasClass","previousSelectedButtonIndex","keyCode","parentMenu","buttonIndex","preventDefault","directive","$rootScope","link","scope","attrs","$apply","stopPropagation","activeContextMenuController","contextMenu","pageX","pageY"],"mappings":"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","file":"bootstrapContextMenu.js","sourcesContent":["'use strict';\r\n\r\nangular.module('bootstrapContextMenu', [])\r\n    .controller('ContextMenuController', ['$scope', '$document', '$element', '$window', function ($scope, $document, $element, $window) {\r\n        let isVisible = false;\r\n        // Contains menus and submenus created by this context menu\r\n        let activeMenus = [];\r\n        // Create nested menus at the left side\r\n        let nestedAtLeft = false;\r\n\r\n        // Keyboard input\r\n        const KEYCODE_LEFT = 37;\r\n        const KEYCODE_RIGHT = 39;\r\n        const KEYCODE_UP = 38;\r\n        const KEYCODE_DOWN = 40;\r\n        const KEYCODE_CONFIRM = 13;\r\n        let selectedMenuIndex = 0;\r\n        let selectedButtonIndex = 0;\r\n\r\n        let getMenuAtDepth = (depth) => {\r\n            let result = null;\r\n            angular.forEach(activeMenus, (menu) => {\r\n                if (menu.depth == depth) {\r\n                    result = menu;\r\n                }\r\n            });\r\n            return result;\r\n        };\r\n\r\n        let isButtonItemEnabled = (item) => {\r\n            if (typeof(item.enabled) === 'boolean') {\r\n                return item.enabled;\r\n            } else if (typeof(item.enabled) !== 'string') {\r\n                return true;\r\n            }\r\n            return $scope.$eval(item.enabled);\r\n        };\r\n\r\n        // Moves menu at given position on the screen\r\n        let setMenuPosition = (menuElement, x, y) => {\r\n            menuElement.css({\r\n                position: 'absolute',\r\n                left: x + 'px',\r\n                top: y + 'px',\r\n                // Menu should aways be on the top of all elements\r\n                'z-index': 99999\r\n            });\r\n        };\r\n\r\n        let handleItemClick = (item) => {\r\n            if (!isButtonItemEnabled(item)) {\r\n                return;\r\n            }\r\n            switch (typeof(item.click)) {\r\n                case 'function':\r\n                    item.click();\r\n                    break;\r\n                case 'string':\r\n                    $scope.$eval(item.click);\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n            this.hide();\r\n        };\r\n\r\n        let handleItemMouseOver = (menu, button, item, fromKeyboard=false) => {\r\n            // Remove keyboard selection\r\n            if (activeMenus[selectedMenuIndex] && !fromKeyboard) {\r\n                let selectedMenu = activeMenus[selectedMenuIndex];\r\n                let selectedButton = selectedMenu.buttons[selectedButtonIndex];\r\n               \tselectedButton.element.removeClass('active');\r\n                selectedButtonIndex = 0;\r\n                selectedMenuIndex = 0;\r\n            }\r\n            // Hide all nested menus at higher levels\r\n            let menusToRemove = [];\r\n            angular.forEach(activeMenus, (m) => {\r\n                if (m.depth > menu.depth) {\r\n                    menusToRemove.push(m);\r\n                }\r\n            });\r\n            angular.forEach(menusToRemove, (m) => this.removeMenu(m));\r\n\r\n            // Show the nested menu\r\n            if (item.submenu) {\r\n                let position = angular.element(button).offset();\r\n                let menuWidth = menu.element.width();\r\n                let x = position.left + menuWidth;\r\n                let y = position.top;\r\n\r\n                let nestedMenu = this.addMenu(x, y, item.submenu, menu.depth + 1, button);\r\n                y = nestedMenu.element.offset().top;\r\n\r\n                // Check menu for leaving the screen\r\n                // Move menu to (0,0), to restore the maximal size, \r\n                // otherwise menu width could shrink at the edge\r\n                // of the page\r\n                setMenuPosition(nestedMenu.element, 0, 0);                \r\n                let nestedMenuWidth = nestedMenu.element.width();\r\n                setMenuPosition(nestedMenu.element, x, y);\r\n\r\n                if (nestedAtLeft || x + nestedMenuWidth > angular.element($window).width()) {\r\n                    x = position.left - nestedMenuWidth;\r\n                    setMenuPosition(nestedMenu.element, x, y);\r\n                    // All other menus should be created at the left side from now\r\n                    nestedAtLeft = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Create menu/submenu for this context menu\r\n         * @param {Number} x - horizontal position\r\n         * @param {Number} y - vertical position\r\n         * @param {Array} items - array of menu elements\r\n         * @param {Number} [0] depth - (for submenu only) level of nesting\r\n         * @param {Element} [null] parentButtonElement - (for submenu only) parent menu button that opened this submenu\r\n         */\r\n        this.addMenu = (x, y, items, depth=0, parentButtonElement=null) => {\r\n            if (typeof(items) !== 'object') {\r\n                return null;\r\n            }\r\n\r\n            let div = angular.element('<div>');\r\n            div.addClass('list-group context-menu');\r\n            div.attr({role: 'group'});\r\n\r\n            let menu = {\r\n                element: div, \r\n                buttons: [],\r\n                depth, // level of nesting\r\n                parentButtonElement\r\n            };\r\n\r\n            // Add menu buttons\r\n            angular.forEach(items, (item) => {\r\n                if (typeof(item) !== 'object') {\r\n                    return;\r\n                }\r\n                let button = angular.element('<a>');\r\n                button.addClass('list-group-item context-menu-item'); \r\n                button.append(item.text + '&nbsp;');\r\n                button.attr({href: '#'});\r\n\r\n                if (item.submenu) {\r\n                    let span = angular.element('<span>');\r\n                    span.addClass('glyphicon glyphicon-triangle-right pull-right');\r\n                    button.append(span);\r\n                }                \r\n                div.append(button);\r\n\r\n                let isEnabled = isButtonItemEnabled(item);\r\n\r\n                if (isEnabled) {                    \r\n                    button.on('click', (event) => handleItemClick(item));\r\n                    button.on('mouseover', (event) => handleItemMouseOver(menu, button, item));\r\n                } else {\r\n                    button.addClass('disabled');\r\n                }\r\n\r\n                menu.buttons.push({element: button, item});\r\n            });\r\n\r\n            // Add menu to the DOM\r\n            angular.element($document).find('body').append(div);\r\n            activeMenus.push(menu);\r\n\r\n            // Check for leaving the screen vertically\r\n            setMenuPosition(div, 0, 0);\r\n            let menuHeight = div.height();            \r\n            y = Math.min(y, angular.element($window).height() - menuHeight + $window.pageYOffset);\r\n            setMenuPosition(div, x, y);\r\n            return menu;\r\n        };\r\n\r\n        this.removeMenu = (menu) => {\r\n            if (!isVisible) {\r\n                return;\r\n            }\r\n            let index = activeMenus.indexOf(menu);\r\n            if (index < 0) {\r\n                return;\r\n            }\r\n            activeMenus.splice(index, 1);\r\n            menu.element.remove();\r\n        };\r\n\r\n        /**\r\n         * Show this context menu\r\n         * @param {Number} x - horizontal position\r\n         * @param {Number} y - vertical position\r\n         * @param {Array} items - array of menu elements\r\n         */\r\n        this.show = (x, y, items) => {\r\n            isVisible = true;\r\n            nestedAtLeft = false;\r\n\r\n            let menu = this.addMenu(x, y, items);\r\n            y = menu.element.offset().top;\r\n\r\n            // Check for leaving the screen horizontally\r\n            setMenuPosition(menu.element, 0, 0);                \r\n            let menuWidth = menu.element.width();\r\n            setMenuPosition(menu.element, x, y);\r\n\r\n            if (x + menuWidth > angular.element($window).width()) {\r\n                x -= menuWidth;\r\n                setMenuPosition(menu.element, x, y);\r\n                nestedAtLeft = true;\r\n            }\r\n        };\r\n\r\n        this.hide = () => {\r\n            if (!isVisible) {\r\n                return;\r\n            }\r\n            isVisible = false;\r\n            angular.forEach(activeMenus, (menu) => {\r\n                menu.element.remove();\r\n            });\r\n            activeMenus = [];\r\n        };\r\n\r\n        $document.on('mousedown', (event) => {\r\n            if (!isVisible) {\r\n                return;\r\n            }\r\n            // Don't hide if target is a menu or a menu button\r\n            if (angular.element(event.target).hasClass('context-menu') || \r\n                angular.element(event.target).hasClass('context-menu-item')) \r\n            {\r\n                return;\r\n            }\r\n            // Hide otherwise\r\n            this.hide();\r\n        });\r\n\r\n        // Menu nvigation using keyboard      \r\n        $document.on('keydown', (event) => {\r\n            if (!isVisible) {\r\n                return;\r\n            }\r\n            let selectedMenu = activeMenus[selectedMenuIndex];\r\n            if (!selectedMenu) {\r\n                selectedMenuIndex = 0;\r\n                selectedButtonIndex = 0;\r\n                return;\r\n            }\r\n            let selectedButton = selectedMenu.buttons[selectedButtonIndex];\r\n            let previousSelectedButtonIndex = selectedButtonIndex;\r\n            \r\n            switch (event.keyCode) {\r\n                // Choose button depending on menu direction\r\n                case nestedAtLeft ? KEYCODE_RIGHT : KEYCODE_LEFT:\r\n                    let parentMenu = getMenuAtDepth(selectedMenu.depth - 1);\r\n                    if (parentMenu) {\r\n                        let buttonIndex = 0;\r\n                        // Get button that opens this submenu\r\n                        angular.forEach(parentMenu.buttons, (button, index) => {\r\n                            if (button.element == selectedMenu.parentButtonElement) {\r\n                                buttonIndex = index;\r\n                                return;\r\n                            }\r\n                        });\r\n                        // Go to the parent menu\r\n                        selectedMenuIndex = activeMenus.indexOf(parentMenu);\r\n                        selectedMenu = activeMenus[selectedMenuIndex];\r\n                        previousSelectedButtonIndex = -1;\r\n                        selectedButtonIndex = buttonIndex;\r\n                    } \r\n                    break;\r\n                // Choose button depending on menu direction\r\n                case nestedAtLeft ? KEYCODE_LEFT : KEYCODE_RIGHT:\r\n                    if (selectedButton.item.submenu) {\r\n                        let nestedMenu = getMenuAtDepth(selectedMenu.depth + 1);\r\n                        if (nestedMenu) {\r\n                            // Go to the nested menu\r\n                            selectedMenuIndex = activeMenus.indexOf(nestedMenu);\r\n                            selectedMenu = activeMenus[selectedMenuIndex];\r\n                            previousSelectedButtonIndex = -1;\r\n                            selectedButtonIndex = 0;\r\n                        } \r\n                    }\r\n                    break;\r\n                case KEYCODE_UP:\r\n                    selectedButtonIndex--;\r\n                    if (selectedButtonIndex < 0) {\r\n                        selectedButtonIndex = selectedMenu.buttons.length - 1;\r\n                    }                    \r\n                    break;\r\n                case KEYCODE_DOWN:\r\n                    selectedButtonIndex++;\r\n                    if (selectedButtonIndex >= selectedMenu.buttons.length) {\r\n                        selectedButtonIndex = 0;\r\n                    }               \r\n                    break;\r\n                case KEYCODE_CONFIRM:\r\n                    // Emulate mouse click to select an item\r\n                    handleItemClick(selectedButton.item);\r\n                    break;\r\n            }\r\n            if (selectedButtonIndex != previousSelectedButtonIndex) {\r\n                event.preventDefault();\r\n                // Remove the 'active' class from the previously selected button\r\n                selectedButton.element.removeClass('active');\r\n                // Select new button\r\n                selectedButton = selectedMenu.buttons[selectedButtonIndex];\r\n                selectedButton.element.addClass('active');\r\n                // Emulate mouse over when selecting an item\r\n                handleItemMouseOver(selectedMenu, selectedButton.element, selectedButton.item, true);\r\n            }\r\n        });\r\n    }])\r\n\r\n    .directive('contextMenu', ['$rootScope', function($rootScope) {\r\n        return {\r\n            controller: 'ContextMenuController',\r\n            link: (scope, element, attrs, controller) => {\r\n                element.on('contextmenu', function (event) {\r\n                    $rootScope.$apply(function() {\r\n                        event.preventDefault();\r\n                        event.stopPropagation();\r\n                        // Hide current menu if any is showing\r\n                        if ($rootScope.activeContextMenuController) {\r\n                            $rootScope.activeContextMenuController.hide();\r\n                        }\r\n                        // Show new menu\r\n                        let items = scope.$eval(attrs.contextMenu);\r\n                        controller.show(event.pageX, event.pageY, items);\r\n                        $rootScope.activeContextMenuController = controller;\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);"],"sourceRoot":"/source/"}